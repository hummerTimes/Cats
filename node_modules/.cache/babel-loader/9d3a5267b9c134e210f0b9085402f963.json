{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sergey\\\\Documents\\\\GitHub\\\\react-podcasts\\\\src\\\\TableCats.js\";\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\nimport matchSorter from 'match-sorter';\nvar dataS = [{\n  description: 'Jason Maurer',\n  name: 'Tanner Linsley',\n  url: '26'\n}];\nexport default function TableBreed(_ref) {\n  var data = _ref.data;\n  var dataPreview = data === null ? dataS : data;\n  var pNames = dataPreview.map(function (a) {\n    return a.name;\n  });\n  return React.createElement(ReactTable, {\n    data: dataPreview,\n    defaultPageSize: 20,\n    className: \"-striped -highlight\",\n    filterable: true,\n    columns: [{\n      Header: 'Name',\n      accessor: 'url',\n      filterMethod: function filterMethod(filter, rows) {\n        return matchSorter(rows, filter.value, {\n          keys: [\"name\"]\n        });\n      },\n      filterAll: true,\n      Cell: function Cell(props) {\n        return React.createElement(\"img\", {\n          src: props.value,\n          alt: 'Image...',\n          width: \"200px\",\n          height: \"200px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n      } // Custom cell components!\n\n    }, {\n      Header: 'Breed',\n      accessor: 'name',\n      filterMethod: function filterMethod(filter, row) {\n        if (filter.value === \"all\") {\n          return true;\n        }\n\n        return row[filter.id] === filter.value;\n      },\n      Filter: function Filter(_ref2) {\n        var filter = _ref2.filter,\n            _onChange = _ref2.onChange;\n        return React.createElement(\"select\", {\n          onChange: function onChange(event) {\n            return _onChange(event.target.value);\n          },\n          style: {\n            width: \"100%\"\n          },\n          value: filter ? filter.value : \"all\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"all\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"Show All\"), pNames.map(function (k) {\n          return React.createElement(\"option\", {\n            key: k.toString(),\n            value: k,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, k);\n        }));\n      }\n    }, {\n      Header: 'Description',\n      accessor: 'description'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\react-podcasts\\src\\TableCats.js"],"names":["React","ReactTable","matchSorter","dataS","description","name","url","TableBreed","data","dataPreview","pNames","map","a","Header","accessor","filterMethod","filter","rows","value","keys","filterAll","Cell","props","row","id","Filter","onChange","event","target","width","k","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,6BAAP;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,IAAMC,KAAK,GAAG,CAAC;AACXC,EAAAA,WAAW,EAAE,cADF;AAEXC,EAAAA,IAAI,EAAE,gBAFK;AAGXC,EAAAA,GAAG,EAAE;AAHM,CAAD,CAAd;AAMA,eAAe,SAASC,UAAT,OACb;AAAA,MADkCC,IAClC,QADkCA,IAClC;AACE,MAAMC,WAAW,GAAGD,IAAI,KAAK,IAAT,GAAgBL,KAAhB,GAAwBK,IAA5C;AACA,MAAME,MAAM,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACP,IAAN;AAAA,GAAjB,CAAf;AAEA,SACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEI,WADR;AAEE,IAAA,eAAe,EAAE,EAFnB;AAGE,IAAA,SAAS,EAAC,qBAHZ;AAIE,IAAA,UAAU,MAJZ;AAKE,IAAA,OAAO,EAAI,CAAC;AACRI,MAAAA,MAAM,EAAE,MADA;AAERC,MAAAA,QAAQ,EAAE,KAFF;AAGRC,MAAAA,YAAY,EAAE,sBAACC,MAAD,EAASC,IAAT;AAAA,eACZf,WAAW,CAACe,IAAD,EAAOD,MAAM,CAACE,KAAd,EAAqB;AAAEC,UAAAA,IAAI,EAAE,CAAC,MAAD;AAAR,SAArB,CADC;AAAA,OAHN;AAKRC,MAAAA,SAAS,EAAE,IALH;AAMRC,MAAAA,IAAI,EAAE,cAAAC,KAAK;AAAA,eAAI;AAAK,UAAA,GAAG,EAAEA,KAAK,CAACJ,KAAhB;AAAuB,UAAA,GAAG,EAAE,UAA5B;AAAwC,UAAA,KAAK,EAAC,OAA9C;AAAsD,UAAA,MAAM,EAAC,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAJ;AAAA,OANH,CAM8E;;AAN9E,KAAD,EAOJ;AACHL,MAAAA,MAAM,EAAE,OADL;AAEHC,MAAAA,QAAQ,EAAE,MAFP;AAGHC,MAAAA,YAAY,EAAE,sBAACC,MAAD,EAASO,GAAT,EAAiB;AAC7B,YAAIP,MAAM,CAACE,KAAP,KAAiB,KAArB,EAA4B;AAC1B,iBAAO,IAAP;AACD;;AACD,eAAOK,GAAG,CAACP,MAAM,CAACQ,EAAR,CAAH,KAAmBR,MAAM,CAACE,KAAjC;AACD,OARE;AASHO,MAAAA,MAAM,EAAE,uBAAyB;AAAA,YAAtBT,MAAsB,SAAtBA,MAAsB;AAAA,YAAdU,SAAc,SAAdA,QAAc;AAC/B,eACA;AACE,UAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,mBAAID,SAAQ,CAACC,KAAK,CAACC,MAAN,CAAaV,KAAd,CAAZ;AAAA,WADjB;AAEE,UAAA,KAAK,EAAE;AAAEW,YAAAA,KAAK,EAAE;AAAT,WAFT;AAGE,UAAA,KAAK,EAAEb,MAAM,GAAGA,MAAM,CAACE,KAAV,GAAkB,KAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE;AAAQ,UAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,EAOIR,MAAM,CAACC,GAAP,CAAY,UAAAmB,CAAC,EAAI;AACjB,iBAAO;AAAQ,YAAA,GAAG,EAAEA,CAAC,CAACC,QAAF,EAAb;AAA2B,YAAA,KAAK,EAAED,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAsCA,CAAtC,CAAP;AACC,SAFD,CAPJ,CADA;AAaD;AAvBE,KAPI,EA+BJ;AACHjB,MAAAA,MAAM,EAAE,aADL;AAEHC,MAAAA,QAAQ,EAAE;AAFP,KA/BI,CALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA0CC","sourcesContent":["import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport matchSorter from 'match-sorter'\r\n\r\nconst dataS = [{\r\n    description: 'Jason Maurer',\r\n    name: 'Tanner Linsley',\r\n    url: '26'\r\n}];\r\n\r\nexport default function TableBreed({data}) \r\n  { \r\n    const dataPreview = data === null ? dataS : data;\r\n    const pNames = dataPreview.map(a => a.name);\r\n    \r\n    return (\r\n      <ReactTable\r\n        data={dataPreview} \r\n        defaultPageSize={20}\r\n        className=\"-striped -highlight\"   \r\n        filterable\r\n        columns = {[{\r\n            Header: 'Name',\r\n            accessor: 'url' ,\r\n            filterMethod: (filter, rows) =>\r\n              matchSorter(rows, filter.value, { keys: [\"name\"] }),\r\n            filterAll: true ,\r\n            Cell: props => <img src={props.value} alt={'Image...'} width='200px' height='200px'/> // Custom cell components!\r\n            }, {\r\n            Header: 'Breed',\r\n            accessor: 'name',\r\n            filterMethod: (filter, row) => {\r\n              if (filter.value === \"all\") {\r\n                return true;\r\n              }\r\n              return row[filter.id] === filter.value;\r\n            },\r\n            Filter: ({ filter, onChange }) =>{\r\n              return (\r\n              <select\r\n                onChange={event => onChange(event.target.value)}\r\n                style={{ width: \"100%\" }}\r\n                value={filter ? filter.value : \"all\"}\r\n              > \r\n                <option value=\"all\">Show All</option>\r\n                {\r\n                  pNames.map( k => {\r\n                  return <option key={k.toString()} value={k}>{k}</option>\r\n                  })\r\n                }\r\n              </select>)\r\n            } \r\n            }, {\r\n            Header: 'Description',\r\n            accessor: 'description'\r\n            }]}\r\n      />\r\n  );}"]},"metadata":{},"sourceType":"module"}