{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Sergey\\\\Documents\\\\GitHub\\\\react-podcasts\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Sergey\\\\Documents\\\\GitHub\\\\react-podcasts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Sergey\\\\Documents\\\\GitHub\\\\react-podcasts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nexport function fetchCatImage(_x) {\n  return _fetchCatImage.apply(this, arguments);\n}\n\nfunction _fetchCatImage() {\n  _fetchCatImage = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(a) {\n    var res, data, _data, url;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"https://api.thecatapi.com/v1/images/search?breed_ids=\".concat(a.id));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            data = _context.sent;\n            _data = _slicedToArray(data, 1), url = _data[0];\n            return _context.abrupt(\"return\", url);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[0, 11]]);\n  }));\n  return _fetchCatImage.apply(this, arguments);\n}\n\nexport function fetchCatBreeds() {\n  try {\n    var res = fetch(\"https://api.thecatapi.com/v1/breeds\");\n    var data = res.json();\n    var pArray = data.map(function (a) {\n      return fetchCatImage(a);\n    });\n    var urls = Promise.all(pArray);\n    var array = [];\n    data.forEach(function (element, index) {\n      var item = {\n        'description': element['description'],\n        'name': element['description'],\n        'url': urls[index].url\n      };\n      array.push(item);\n    });\n    return array;\n  } catch (err) {\n    console.log(err);\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\react-podcasts\\src\\API.js"],"names":["fetchCatImage","a","fetch","id","res","json","data","url","console","log","fetchCatBreeds","pArray","map","urls","Promise","all","array","forEach","element","index","item","push","err"],"mappings":";;;AACA,gBAAsBA,aAAtB;AAAA;AAAA;;;;;2BAAO,iBAA6BC,CAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEmBC,KAAK,gEAAyDD,CAAC,CAACE,EAA3D,EAFxB;;AAAA;AAEOC,YAAAA,GAFP;AAAA;AAAA,mBAGoBA,GAAG,CAACC,IAAJ,EAHpB;;AAAA;AAGOC,YAAAA,IAHP;AAAA,mCAIeA,IAJf,MAIQC,GAJR;AAAA,6CAKQA,GALR;;AAAA;AAAA;AAAA;AAODC,YAAAA,OAAO,CAACC,GAAR;;AAPC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWL,OAAQ,SAASC,cAAT,GAA0B;AAChC,MAAG;AACD,QAAMN,GAAG,GAAIF,KAAK,uCAAlB;AACA,QAAMI,IAAI,GAAIF,GAAG,CAACC,IAAJ,EAAd;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACM,GAAL,CAAS,UAAAX,CAAC;AAAA,aAAID,aAAa,CAACC,CAAD,CAAjB;AAAA,KAAV,CAAf;AACA,QAAMY,IAAI,GAAIC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CAAd;AAEA,QAAMK,KAAK,GAAG,EAAd;AAEAV,IAAAA,IAAI,CAACW,OAAL,CAAa,UAASC,OAAT,EAAkBC,KAAlB,EAAyB;AACpC,UAAMC,IAAI,GAAG;AAAC,uBAAeF,OAAO,CAAC,aAAD,CAAvB;AAAyC,gBAAQA,OAAO,CAAC,aAAD,CAAxD;AAA0E,eAAQL,IAAI,CAACM,KAAD,CAAJ,CAAYZ;AAA9F,OAAb;AACAS,MAAAA,KAAK,CAACK,IAAN,CAAWD,IAAX;AACD,KAHD;AAKA,WAAOJ,KAAP;AACD,GAdD,CAcC,OAAMM,GAAN,EAAU;AACTd,IAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACF;AACD","sourcesContent":["\r\nexport async function fetchCatImage(a) {\r\n    try{\r\n        const res = await fetch(`https://api.thecatapi.com/v1/images/search?breed_ids=${a.id}`)\r\n        const data = await res.json();\r\n        const [url] = data; \r\n        return url;\r\n    }catch(err){\r\n      console.log(err)\r\n   }\r\n  }\r\n  \r\n  export  function fetchCatBreeds() {\r\n    try{\r\n      const res =  fetch(`https://api.thecatapi.com/v1/breeds`);\r\n      const data =  res.json();\r\n      const pArray = data.map(a => fetchCatImage(a)); \r\n      const urls =  Promise.all(pArray); \r\n      \r\n      const array = [];\r\n\r\n      data.forEach(function(element, index) {\r\n        const item = {'description': element['description'] , 'name': element['description'] , 'url' : urls[index].url};\r\n        array.push(item);\r\n      });      \r\n\r\n      return array;\r\n    }catch(err){\r\n      console.log(err)\r\n   }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}