{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Sergey\\\\Documents\\\\GitHub\\\\react-podcasts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sergey\\\\Documents\\\\GitHub\\\\react-podcasts\\\\src\\\\Cats.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport Item from './Item';\nimport { ThemeContext, PodcastContext } from './app-context';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\nimport { fetchCatBreeds } from './API';\nvar columns = [{\n  Header: 'Photo',\n  accessor: 'url' // String-based value accessors!\n\n}, {\n  Header: 'Name',\n  accessor: 'name',\n  Cell: function Cell(props) {\n    return React.createElement(\"span\", {\n      className: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, props.value, \"AAA\");\n  } // Custom cell components!\n\n}, {\n  id: 'friendName',\n  // Required because our accessor is not a string\n  Header: 'Description',\n  accessor: 'description'\n}];\nvar dataS = [{\n  name: 'Tanner Linsley',\n  url: '26',\n  description: 'Jason Maurer'\n}];\nexport var TableCats = function TableCats(_ref) {\n  var data = _ref.data;\n  return React.createElement(ReactTable, {\n    data: data === null && dataS,\n    columns: columns,\n    defaultPageSize: 20,\n    className: \"-striped -highlight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n};\n\nvar getDataCats = function getDataCats() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataTable = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    fetchCatBreeds().then(function (result) {\n      // you can access the result from the promise here\n      console.log(result);\n      setData(result);\n    });\n  });\n  return dataTable;\n};\n\nvar App = function App() {\n  var podcast = useContext(PodcastContext);\n  var theme = useContext(ThemeContext);\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      count = _useState4[0],\n      setCount = _useState4[1];\n\n  var _useState5 = useState('Test value'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      changeValue = _useState6[1];\n\n  var data = getDataCats();\n\n  var handleValueChange = function handleValueChange(e) {\n    changeValue(e.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"card \".concat(theme),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(TableCats, {\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(Item, {\n    label: \"Podcast\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, podcast)), React.createElement(Item, {\n    label: \"TableBreeds\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Item, {\n    label: \"Counter value is \".concat(count),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Click me\")), React.createElement(Item, {\n    label: \"\".concat(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: value,\n    onChange: handleValueChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\react-podcasts\\src\\Cats.js"],"names":["React","useContext","useState","useEffect","Item","ThemeContext","PodcastContext","ReactTable","fetchCatBreeds","columns","Header","accessor","Cell","props","value","id","dataS","name","url","description","TableCats","data","getDataCats","dataTable","setData","then","result","console","log","App","podcast","theme","count","setCount","changeValue","handleValueChange","e","target"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,6BAAP;AACA,SAASC,cAAT,QAA8B,OAA9B;AAEA,IAAMC,OAAO,GAAG,CAAC;AACfC,EAAAA,MAAM,EAAE,OADO;AAEfC,EAAAA,QAAQ,EAAE,KAFK,CAEC;;AAFD,CAAD,EAGb;AACDD,EAAAA,MAAM,EAAE,MADP;AAEDC,EAAAA,QAAQ,EAAE,MAFT;AAGDC,EAAAA,IAAI,EAAE,cAAAC,KAAK;AAAA,WAAI;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BA,KAAK,CAACC,KAAhC,QAAJ;AAAA,GAHV,CAG+D;;AAH/D,CAHa,EAOb;AACDC,EAAAA,EAAE,EAAE,YADH;AACiB;AAClBL,EAAAA,MAAM,EAAE,aAFP;AAGDC,EAAAA,QAAQ,EAAE;AAHT,CAPa,CAAhB;AAaE,IAAMK,KAAK,GAAG,CAAC;AACbC,EAAAA,IAAI,EAAE,gBADO;AAEbC,EAAAA,GAAG,EAAE,IAFQ;AAGbC,EAAAA,WAAW,EAAE;AAHA,CAAD,CAAd;AAMF,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,SAEnB,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEA,IAAI,KAAK,IAAT,IAAiBL,KADzB;AAEE,IAAA,OAAO,EAAEP,OAFX;AAGE,IAAA,eAAe,EAAE,EAHnB;AAIE,IAAA,SAAS,EAAC,qBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFmB;AAAA,CAAlB;;AAUP,IAAMa,WAAW,GAAG,SAAdA,WAAc,GAAK;AAAA,kBACQpB,QAAQ,CAAC,IAAD,CADhB;AAAA;AAAA,MACdqB,SADc;AAAA,MACHC,OADG;;AAGrBrB,EAAAA,SAAS,CAAC,YAAM;AACZK,IAAAA,cAAc,GAAGiB,IAAjB,CAAsB,UAACC,MAAD,EAAY;AAClC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAcF,MAAd;AACAF,MAAAA,OAAO,CAACE,MAAD,CAAP;AACH,KAJG;AAKH,GANQ,CAAT;AAOA,SAAOH,SAAP;AACH,CAXD;;AAaA,IAAMM,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,MAAMC,OAAO,GAAG7B,UAAU,CAACK,cAAD,CAA1B;AACA,MAAMyB,KAAK,GAAG9B,UAAU,CAACI,YAAD,CAAxB;;AAFgB,mBAGUH,QAAQ,CAAC,CAAD,CAHlB;AAAA;AAAA,MAGT8B,KAHS;AAAA,MAGFC,QAHE;;AAAA,mBAIa/B,QAAQ,CAAC,YAAD,CAJrB;AAAA;AAAA,MAITY,KAJS;AAAA,MAIFoB,WAJE;;AAKhB,MAAMb,IAAI,GAAGC,WAAW,EAAxB;;AAEA,MAAMa,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAO;AAC/BF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAX;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,iBAAUiB,KAAV,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAIV,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADH,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKS,OAAL,CADF,CAJF,EAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,6BAAsBE,KAAtB,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAXF,EAeE,oBAAC,IAAD;AAAM,IAAA,KAAK,YAAKlB,KAAL,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,QAAQ,EAAEqB,iBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAfF,CADF;AAwBD,CAnCD;;AAqCA,eAAeN,GAAf","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport Item from './Item';\r\nimport { ThemeContext, PodcastContext } from './app-context';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport { fetchCatBreeds} from './API'\r\n\r\nconst columns = [{\r\n  Header: 'Photo',\r\n  accessor: 'url' // String-based value accessors!\r\n}, {\r\n  Header: 'Name',\r\n  accessor: 'name',\r\n  Cell: props => <span className='number'>{props.value}AAA</span> // Custom cell components!\r\n}, {\r\n  id: 'friendName', // Required because our accessor is not a string\r\n  Header: 'Description',\r\n  accessor: 'description'\r\n}]\r\n\r\n  const dataS = [{\r\n    name: 'Tanner Linsley',\r\n    url: '26',\r\n    description: 'Jason Maurer'\r\n  }];\r\n\r\nexport const TableCats = ({data}) => \r\n  (\r\n      <ReactTable\r\n        data={data === null && dataS}\r\n        columns={columns} \r\n        defaultPageSize={20}\r\n        className=\"-striped -highlight\"   \r\n      />\r\n  );\r\n\r\nconst getDataCats = () =>{\r\n    const [dataTable, setData] = useState(null);\r\n \r\n    useEffect(() => {\r\n        fetchCatBreeds().then((result) => {\r\n        // you can access the result from the promise here\r\n        console.log(  result )\r\n        setData(result);\r\n    });\r\n    });\r\n    return dataTable;\r\n}\r\n\r\nconst App = () => {\r\n  const podcast = useContext(PodcastContext);\r\n  const theme = useContext(ThemeContext);\r\n  const [count, setCount] = useState(0);\r\n  const [value, changeValue] = useState('Test value');\r\n  const data = getDataCats(); \r\n\r\n  const handleValueChange = (e) => {\r\n    changeValue(e.target.value);\r\n  }  \r\n\r\n  return (\r\n    <div className={`card ${theme}`}>\r\n       <Item>\r\n       <TableCats data = {data}/>\r\n       </Item> \r\n      <Item label=\"Podcast\">\r\n        <h4>{podcast}</h4>\r\n      </Item>\r\n      <Item label=\"TableBreeds\">\r\n      \r\n      </Item>\r\n\r\n      <Item label={`Counter value is ${count}`}>\r\n        <button onClick={() => setCount(count + 1)}>Click me</button>\r\n      </Item>\r\n\r\n      <Item label={`${value}`}>\r\n        <input\r\n          value={value}\r\n          onChange={handleValueChange}\r\n        />\r\n      </Item>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}